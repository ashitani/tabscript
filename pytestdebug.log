versions pytest-5.4.2, py-1.8.1, python-3.7.7.final.0
cwd=/Users/ashiya/git/tabscript
args=('-v', '--debug', 'tests/parser/')

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x10749eb90>
    pytest_plugin_registered [hook]
        plugin: <Session tabscript exitstatus=None testsfailed=0 testscollected=0>
        manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x10749eb90>
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x107711350>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x107711610>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: faulthandler [assertion]
      pytest_configure [hook]
          config: <_pytest.config.Config object at 0x10749eb90>
      finish pytest_configure --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.faulthandler.FaultHandlerHooks object at 0x107711710>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.stepwise.StepwisePlugin object at 0x1076f7c90>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: pdb [assertion]
    early skip of rewriting module: cmd [assertion]
    early skip of rewriting module: code [assertion]
    early skip of rewriting module: codeop [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x106867f50>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x10749eb90>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.resultlog' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/resultlog.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended' tmpfile=<_pytest.capture.EncodedFile object at 0x10748e310>> err=<FDCapture 2 oldfd=6 _state='suspended' tmpfile=<_pytest.capture.EncodedFile object at 0x1076f7650>> in_=<FDCapture 0 oldfd=3 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='UTF-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'conftest' from '/Users/ashiya/git/tabscript/tests/conftest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session tabscript exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x107711350>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x107711610>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.faulthandler.FaultHandlerHooks object at 0x107711710>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.stepwise.StepwisePlugin object at 0x1076f7c90>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x107711d50>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x10774bad0>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session tabscript exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x106867f50>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x10749eb90>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.resultlog' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/resultlog.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended' tmpfile=<_pytest.capture.EncodedFile object at 0x10748e310>> err=<FDCapture 2 oldfd=6 _state='suspended' tmpfile=<_pytest.capture.EncodedFile object at 0x1076f7650>> in_=<FDCapture 0 oldfd=3 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='UTF-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'conftest' from '/Users/ashiya/git/tabscript/tests/conftest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session tabscript exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x107711350>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x107711610>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.faulthandler.FaultHandlerHooks object at 0x107711710>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.stepwise.StepwisePlugin object at 0x1076f7c90>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x107711d50>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x10774bad0>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x10774bfd0>
          manager: <_pytest.config.PytestPluginManager object at 0x106867f50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x10749eb90>
          startdir: /Users/ashiya/git/tabscript
      finish pytest_report_header --> [['rootdir: /Users/ashiya/git/tabscript, inifile: pytest.ini'], 'cachedir: .pytest_cache', ['using: pytest-5.4.2 pylib-1.8.1']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session tabscript exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
    perform_collect <Session tabscript exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0> ['tests/parser/'] [collection]
        pytest_collectstart [hook]
            collector: <Session tabscript exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session tabscript exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        processing argument (local('/Users/ashiya/git/tabscript/tests/parser'), []) [collection]
            pytest_ignore_collect [hook]
                path: /Users/ashiya/git/tabscript/tests/parser/test_01_preprocess.py
                config: <_pytest.config.Config object at 0x10749eb90>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Users/ashiya/git/tabscript/tests/parser/test_01_preprocess.py
                parent: <Session tabscript exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Users/ashiya/git/tabscript/tests/parser/test_01_preprocess.py
                  parent: <Session tabscript exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module tests/parser/test_01_preprocess.py> [hook]
            finish pytest_collect_file --> [<Module tests/parser/test_01_preprocess.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Users/ashiya/git/tabscript/tests/parser/test_02_structure.py
                config: <_pytest.config.Config object at 0x10749eb90>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Users/ashiya/git/tabscript/tests/parser/test_02_structure.py
                parent: <Session tabscript exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Users/ashiya/git/tabscript/tests/parser/test_02_structure.py
                  parent: <Session tabscript exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module tests/parser/test_02_structure.py> [hook]
            finish pytest_collect_file --> [<Module tests/parser/test_02_structure.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Users/ashiya/git/tabscript/tests/parser/test_03_bar_content.py
                config: <_pytest.config.Config object at 0x10749eb90>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Users/ashiya/git/tabscript/tests/parser/test_03_bar_content.py
                parent: <Session tabscript exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Users/ashiya/git/tabscript/tests/parser/test_03_bar_content.py
                  parent: <Session tabscript exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module tests/parser/test_03_bar_content.py> [hook]
            finish pytest_collect_file --> [<Module tests/parser/test_03_bar_content.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Users/ashiya/git/tabscript/tests/parser/test_04_validation.py
                config: <_pytest.config.Config object at 0x10749eb90>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Users/ashiya/git/tabscript/tests/parser/test_04_validation.py
                parent: <Session tabscript exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Users/ashiya/git/tabscript/tests/parser/test_04_validation.py
                  parent: <Session tabscript exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module tests/parser/test_04_validation.py> [hook]
            finish pytest_collect_file --> [<Module tests/parser/test_04_validation.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Users/ashiya/git/tabscript/tests/parser/test_05_integration.py
                config: <_pytest.config.Config object at 0x10749eb90>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Users/ashiya/git/tabscript/tests/parser/test_05_integration.py
                parent: <Session tabscript exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Users/ashiya/git/tabscript/tests/parser/test_05_integration.py
                  parent: <Session tabscript exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module tests/parser/test_05_integration.py> [hook]
            finish pytest_collect_file --> [<Module tests/parser/test_05_integration.py>] [hook]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=5 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=5 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Module tests/parser/test_01_preprocess.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/parser/test_01_preprocess.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/parser/test_01_preprocess.py>
      find_module called for: test_01_preprocess [assertion]
      matched test file '/Users/ashiya/git/tabscript/tests/parser/test_01_preprocess.py' [assertion]
      found cached rewritten pyc for /Users/ashiya/git/tabscript/tests/parser/test_01_preprocess.py [assertion]
      early skip of rewriting module: tabscript [assertion]
      find_module called for: tabscript.parser [assertion]
      early skip of rewriting module: tabscript.models [assertion]
      early skip of rewriting module: dataclasses [assertion]
      early skip of rewriting module: tabscript.exceptions [assertion]
      early skip of rewriting module: fractions [assertion]
      early skip of rewriting module: tabscript.renderer [assertion]
      early skip of rewriting module: reportlab [assertion]
      early skip of rewriting module: reportlab.local_rl_mods [assertion]
      early skip of rewriting module: reportlab_mods [assertion]
      early skip of rewriting module: reportlab.pdfgen [assertion]
      early skip of rewriting module: reportlab.pdfgen.canvas [assertion]
      early skip of rewriting module: reportlab.rl_config [assertion]
      early skip of rewriting module: reportlab.lib [assertion]
      early skip of rewriting module: reportlab.lib.utils [assertion]
      early skip of rewriting module: pickle [assertion]
      early skip of rewriting module: _compat_pickle [assertion]
      early skip of rewriting module: org [assertion]
      early skip of rewriting module: _pickle [assertion]
      early skip of rewriting module: reportlab.lib.rltempfile [assertion]
      early skip of rewriting module: reportlab.lib.rl_safe_eval [assertion]
      early skip of rewriting module: PIL [assertion]
      early skip of rewriting module: PIL._version [assertion]
      early skip of rewriting module: PIL.Image [assertion]
      early skip of rewriting module: defusedxml [assertion]
      early skip of rewriting module: defusedxml.common [assertion]
      early skip of rewriting module: xml [assertion]
      early skip of rewriting module: xml.parsers [assertion]
      early skip of rewriting module: xml.parsers.expat [assertion]
      early skip of rewriting module: pyexpat [assertion]
      early skip of rewriting module: defusedxml.ElementTree [assertion]
      early skip of rewriting module: xml.etree [assertion]
      early skip of rewriting module: xml.etree.ElementTree [assertion]
      early skip of rewriting module: xml.etree.ElementPath [assertion]
      early skip of rewriting module: _elementtree [assertion]
      early skip of rewriting module: xml.etree.ElementTree [assertion]
      early skip of rewriting module: PIL.ExifTags [assertion]
      early skip of rewriting module: PIL.ImageMode [assertion]
      early skip of rewriting module: PIL.TiffTags [assertion]
      early skip of rewriting module: PIL._binary [assertion]
      early skip of rewriting module: PIL._deprecate [assertion]
      early skip of rewriting module: PIL._util [assertion]
      early skip of rewriting module: PIL._imaging [assertion]
      early skip of rewriting module: cffi [assertion]
      early skip of rewriting module: cffi.api [assertion]
      early skip of rewriting module: cffi.lock [assertion]
      early skip of rewriting module: cffi.error [assertion]
      early skip of rewriting module: cffi.model [assertion]
      early skip of rewriting module: urllib.request [assertion]
      early skip of rewriting module: http [assertion]
      early skip of rewriting module: http.client [assertion]
      find_module called for: email.parser [assertion]
      early skip of rewriting module: email.feedparser [assertion]
      early skip of rewriting module: ssl [assertion]
      early skip of rewriting module: _ssl [assertion]
      early skip of rewriting module: urllib.error [assertion]
      early skip of rewriting module: urllib.response [assertion]
      early skip of rewriting module: _scproxy [assertion]
      early skip of rewriting module: reportlab.rl_settings [assertion]
      early skip of rewriting module: reportlab.local_rl_settings [assertion]
      early skip of rewriting module: reportlab_settings [assertion]
      early skip of rewriting module: reportlab.lib.pagesizes [assertion]
      early skip of rewriting module: reportlab.lib.units [assertion]
      early skip of rewriting module: reportlab.pdfbase [assertion]
      early skip of rewriting module: reportlab.pdfbase.pdfdoc [assertion]
      early skip of rewriting module: reportlab.pdfbase.pdfutils [assertion]
      early skip of rewriting module: reportlab.lib.rl_accel [assertion]
      early skip of rewriting module: _rl_accel [assertion]
      early skip of rewriting module: _rl_accel [assertion]
      early skip of rewriting module: _rl_accel [assertion]
      early skip of rewriting module: _rl_accel [assertion]
      early skip of rewriting module: _rl_accel [assertion]
      early skip of rewriting module: _rl_accel [assertion]
      early skip of rewriting module: _rl_accel [assertion]
      early skip of rewriting module: _rl_accel [assertion]
      early skip of rewriting module: _rl_accel [assertion]
      early skip of rewriting module: _rl_accel [assertion]
      early skip of rewriting module: _rl_accel [assertion]
      early skip of rewriting module: reportlab.pdfbase.pdfmetrics [assertion]
      early skip of rewriting module: reportlab.pdfbase._fontdata [assertion]
      early skip of rewriting module: reportlab.pdfbase._fontdata_enc_winansi [assertion]
      early skip of rewriting module: reportlab.pdfbase._fontdata_enc_macroman [assertion]
      early skip of rewriting module: reportlab.pdfbase._fontdata_enc_standard [assertion]
      early skip of rewriting module: reportlab.pdfbase._fontdata_enc_symbol [assertion]
      early skip of rewriting module: reportlab.pdfbase._fontdata_enc_zapfdingbats [assertion]
      early skip of rewriting module: reportlab.pdfbase._fontdata_enc_pdfdoc [assertion]
      early skip of rewriting module: reportlab.pdfbase._fontdata_enc_macexpert [assertion]
      early skip of rewriting module: reportlab.pdfbase._fontdata_widths_courier [assertion]
      early skip of rewriting module: reportlab.pdfbase._fontdata_widths_courierbold [assertion]
      early skip of rewriting module: reportlab.pdfbase._fontdata_widths_courieroblique [assertion]
      early skip of rewriting module: reportlab.pdfbase._fontdata_widths_courierboldoblique [assertion]
      early skip of rewriting module: reportlab.pdfbase._fontdata_widths_helvetica [assertion]
      early skip of rewriting module: reportlab.pdfbase._fontdata_widths_helveticabold [assertion]
      early skip of rewriting module: reportlab.pdfbase._fontdata_widths_helveticaoblique [assertion]
      early skip of rewriting module: reportlab.pdfbase._fontdata_widths_helveticaboldoblique [assertion]
      early skip of rewriting module: reportlab.pdfbase._fontdata_widths_timesroman [assertion]
      early skip of rewriting module: reportlab.pdfbase._fontdata_widths_timesbold [assertion]
      early skip of rewriting module: reportlab.pdfbase._fontdata_widths_timesitalic [assertion]
      early skip of rewriting module: reportlab.pdfbase._fontdata_widths_timesbolditalic [assertion]
      early skip of rewriting module: reportlab.pdfbase._fontdata_widths_symbol [assertion]
      early skip of rewriting module: reportlab.pdfbase._fontdata_widths_zapfdingbats [assertion]
      early skip of rewriting module: reportlab.lib.logger [assertion]
      early skip of rewriting module: reportlab.pdfbase.rl_codecs [assertion]
      early skip of rewriting module: reportlab.pdfbase.ttfonts [assertion]
      early skip of rewriting module: uharfbuzz [assertion]
      early skip of rewriting module: reportlab.pdfgen.pathobject [assertion]
      early skip of rewriting module: reportlab.pdfgen.pdfgeom [assertion]
      early skip of rewriting module: reportlab.pdfgen.textobject [assertion]
      early skip of rewriting module: reportlab.lib.colors [assertion]
      early skip of rewriting module: reportlab.lib.abag [assertion]
      early skip of rewriting module: reportlab.lib.boxstuff [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __name__
            obj: test_01_preprocess
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x107696850>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __spec__
            obj: ModuleSpec(name='test_01_preprocess', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x107696850>, origin='/Users/ashiya/git/tabscript/tests/parser/test_01_preprocess.py')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __file__
            obj: /Users/ashiya/git/tabscript/tests/parser/test_01_preprocess.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __cached__
            obj: /Users/ashiya/git/tabscript/tests/parser/__pycache__/test_01_preprocess.cpython-37.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2020 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: pytest
            obj: <module 'pytest' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: Parser
            obj: <class 'tabscript.parser.Parser'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: ParseError
            obj: <class 'tabscript.exceptions.ParseError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: test_empty_line_removal
            obj: <function test_empty_line_removal at 0x107773170>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f2a390>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_empty_line_removal>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: test_comment_removal
            obj: <function test_comment_removal at 0x107773200>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107765f10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_comment_removal>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: test_multiline_comment_edge_cases
            obj: <function test_multiline_comment_edge_cases at 0x107773440>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107765f10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_multiline_comment_edge_cases>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: test_bracket_normalization
            obj: <function test_bracket_normalization at 0x107938ef0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107765f10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_bracket_normalization>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __new__
            obj: <built-in method __new__ of type object at 0x106510080>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_01_preprocess.py>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/parser/test_01_preprocess.py' lenresult=4 outcome='passed'> [hook]
    genitems <Function test_empty_line_removal> [collection]
      pytest_itemcollected [hook]
          item: <Function test_empty_line_removal>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_comment_removal> [collection]
      pytest_itemcollected [hook]
          item: <Function test_comment_removal>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_multiline_comment_edge_cases> [collection]
      pytest_itemcollected [hook]
          item: <Function test_multiline_comment_edge_cases>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_bracket_normalization> [collection]
      pytest_itemcollected [hook]
          item: <Function test_bracket_normalization>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/parser/test_01_preprocess.py' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/parser/test_02_structure.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/parser/test_02_structure.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/parser/test_02_structure.py>
      find_module called for: test_02_structure [assertion]
      matched test file '/Users/ashiya/git/tabscript/tests/parser/test_02_structure.py' [assertion]
      found cached rewritten pyc for /Users/ashiya/git/tabscript/tests/parser/test_02_structure.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __name__
            obj: test_02_structure
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x107696850>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __spec__
            obj: ModuleSpec(name='test_02_structure', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x107696850>, origin='/Users/ashiya/git/tabscript/tests/parser/test_02_structure.py')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __file__
            obj: /Users/ashiya/git/tabscript/tests/parser/test_02_structure.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __cached__
            obj: /Users/ashiya/git/tabscript/tests/parser/__pycache__/test_02_structure.cpython-37.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2020 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: pytest
            obj: <module 'pytest' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: Parser
            obj: <class 'tabscript.parser.Parser'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: ParseError
            obj: <class 'tabscript.exceptions.ParseError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: Score
            obj: <class 'tabscript.models.Score'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: test_metadata_extraction
            obj: <function test_metadata_extraction at 0x107f2fd40>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f403d0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_metadata_extraction>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: test_invalid_metadata
            obj: <function test_invalid_metadata at 0x107f2fe60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f403d0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_invalid_metadata>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: test_section_structure
            obj: <function test_section_structure at 0x107f2fef0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f403d0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_section_structure>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: test_bar_structure
            obj: <function test_bar_structure at 0x107f2ff80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f403d0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_bar_structure>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: test_volta_structure
            obj: <function test_volta_structure at 0x107f41050>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f403d0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_volta_structure>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: test_empty_section
            obj: <function test_empty_section at 0x107f410e0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f40f10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_empty_section>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __new__
            obj: <built-in method __new__ of type object at 0x106510080>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_02_structure.py>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/parser/test_02_structure.py' lenresult=6 outcome='passed'> [hook]
    genitems <Function test_metadata_extraction> [collection]
      pytest_itemcollected [hook]
          item: <Function test_metadata_extraction>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_invalid_metadata> [collection]
      pytest_itemcollected [hook]
          item: <Function test_invalid_metadata>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_section_structure> [collection]
      pytest_itemcollected [hook]
          item: <Function test_section_structure>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_bar_structure> [collection]
      pytest_itemcollected [hook]
          item: <Function test_bar_structure>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_volta_structure> [collection]
      pytest_itemcollected [hook]
          item: <Function test_volta_structure>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_empty_section> [collection]
      pytest_itemcollected [hook]
          item: <Function test_empty_section>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/parser/test_02_structure.py' lenresult=6 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/parser/test_03_bar_content.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/parser/test_03_bar_content.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/parser/test_03_bar_content.py>
      find_module called for: test_03_bar_content [assertion]
      matched test file '/Users/ashiya/git/tabscript/tests/parser/test_03_bar_content.py' [assertion]
      found cached rewritten pyc for /Users/ashiya/git/tabscript/tests/parser/test_03_bar_content.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __name__
            obj: test_03_bar_content
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x107696850>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __spec__
            obj: ModuleSpec(name='test_03_bar_content', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x107696850>, origin='/Users/ashiya/git/tabscript/tests/parser/test_03_bar_content.py')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __file__
            obj: /Users/ashiya/git/tabscript/tests/parser/test_03_bar_content.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __cached__
            obj: /Users/ashiya/git/tabscript/tests/parser/__pycache__/test_03_bar_content.cpython-37.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2020 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: pytest
            obj: <module 'pytest' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: Parser
            obj: <class 'tabscript.parser.Parser'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: ParseError
            obj: <class 'tabscript.exceptions.ParseError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: Score
            obj: <class 'tabscript.models.Score'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: test_basic_note_parsing
            obj: <function test_basic_note_parsing at 0x107f41dd0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f53690>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_basic_note_parsing>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: test_chord_parsing
            obj: <function test_chord_parsing at 0x107f41e60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f40cd0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_chord_parsing>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: test_rest_parsing
            obj: <function test_rest_parsing at 0x107f41ef0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f40e10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_rest_parsing>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: test_duration_inheritance
            obj: <function test_duration_inheritance at 0x107f41f80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f40e10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_duration_inheritance>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: test_dotted_duration
            obj: <function test_dotted_duration at 0x107f56050>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f40e10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_dotted_duration>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: test_invalid_note_format
            obj: <function test_invalid_note_format at 0x107f560e0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f2a6d0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_invalid_note_format>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: test_muted_note
            obj: <function test_muted_note at 0x107f56170>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f2a6d0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_muted_note>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: test_chord_notation
            obj: <function test_chord_notation at 0x107f56200>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f2a6d0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_chord_notation>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: test_inheritance
            obj: <function test_inheritance at 0x107f56290>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f2a6d0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_inheritance>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: test_move_notation
            obj: <function test_move_notation at 0x107f56320>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f40cd0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_move_notation>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: test_tie_slur_notation
            obj: <function test_tie_slur_notation at 0x107f563b0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f40cd0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_tie_slur_notation>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: test_repeat_bar_parsing
            obj: <function test_repeat_bar_parsing at 0x107f56440>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f40cd0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_repeat_bar_parsing>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: test_volta_bracket_parsing
            obj: <function test_volta_bracket_parsing at 0x107f564d0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f40cd0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_volta_bracket_parsing>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: test_multi_bar_volta_bracket_parsing
            obj: <function test_multi_bar_volta_bracket_parsing at 0x107f56560>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f40cd0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_multi_bar_volta_bracket_parsing>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __new__
            obj: <built-in method __new__ of type object at 0x106510080>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_03_bar_content.py>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/parser/test_03_bar_content.py' lenresult=14 outcome='passed'> [hook]
    genitems <Function test_basic_note_parsing> [collection]
      pytest_itemcollected [hook]
          item: <Function test_basic_note_parsing>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_chord_parsing> [collection]
      pytest_itemcollected [hook]
          item: <Function test_chord_parsing>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_rest_parsing> [collection]
      pytest_itemcollected [hook]
          item: <Function test_rest_parsing>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_duration_inheritance> [collection]
      pytest_itemcollected [hook]
          item: <Function test_duration_inheritance>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_dotted_duration> [collection]
      pytest_itemcollected [hook]
          item: <Function test_dotted_duration>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_invalid_note_format> [collection]
      pytest_itemcollected [hook]
          item: <Function test_invalid_note_format>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_muted_note> [collection]
      pytest_itemcollected [hook]
          item: <Function test_muted_note>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_chord_notation> [collection]
      pytest_itemcollected [hook]
          item: <Function test_chord_notation>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_inheritance> [collection]
      pytest_itemcollected [hook]
          item: <Function test_inheritance>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_move_notation> [collection]
      pytest_itemcollected [hook]
          item: <Function test_move_notation>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_tie_slur_notation> [collection]
      pytest_itemcollected [hook]
          item: <Function test_tie_slur_notation>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_repeat_bar_parsing> [collection]
      pytest_itemcollected [hook]
          item: <Function test_repeat_bar_parsing>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_volta_bracket_parsing> [collection]
      pytest_itemcollected [hook]
          item: <Function test_volta_bracket_parsing>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_multi_bar_volta_bracket_parsing> [collection]
      pytest_itemcollected [hook]
          item: <Function test_multi_bar_volta_bracket_parsing>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/parser/test_03_bar_content.py' lenresult=14 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/parser/test_04_validation.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/parser/test_04_validation.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/parser/test_04_validation.py>
      find_module called for: test_04_validation [assertion]
      matched test file '/Users/ashiya/git/tabscript/tests/parser/test_04_validation.py' [assertion]
      found cached rewritten pyc for /Users/ashiya/git/tabscript/tests/parser/test_04_validation.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __name__
            obj: test_04_validation
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x107696850>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __spec__
            obj: ModuleSpec(name='test_04_validation', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x107696850>, origin='/Users/ashiya/git/tabscript/tests/parser/test_04_validation.py')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __file__
            obj: /Users/ashiya/git/tabscript/tests/parser/test_04_validation.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __cached__
            obj: /Users/ashiya/git/tabscript/tests/parser/__pycache__/test_04_validation.cpython-37.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2020 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: pytest
            obj: <module 'pytest' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: Parser
            obj: <class 'tabscript.parser.Parser'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: ParseError
            obj: <class 'tabscript.exceptions.ParseError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: test_bar_duration
            obj: <function test_bar_duration at 0x107f56cb0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f58290>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_bar_duration>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: test_time_signature_validation
            obj: <function test_time_signature_validation at 0x107f56d40>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f58290>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_time_signature_validation>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: test_repeat_validation
            obj: <function test_repeat_validation at 0x107f56dd0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f58290>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_repeat_validation>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: test_volta_validation
            obj: <function test_volta_validation at 0x107f56e60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f58290>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_volta_validation>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: test_string_number_validation
            obj: <function test_string_number_validation at 0x107f56ef0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f58290>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_string_number_validation>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __new__
            obj: <built-in method __new__ of type object at 0x106510080>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_04_validation.py>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/parser/test_04_validation.py' lenresult=5 outcome='passed'> [hook]
    genitems <Function test_bar_duration> [collection]
      pytest_itemcollected [hook]
          item: <Function test_bar_duration>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_time_signature_validation> [collection]
      pytest_itemcollected [hook]
          item: <Function test_time_signature_validation>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_repeat_validation> [collection]
      pytest_itemcollected [hook]
          item: <Function test_repeat_validation>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_volta_validation> [collection]
      pytest_itemcollected [hook]
          item: <Function test_volta_validation>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_string_number_validation> [collection]
      pytest_itemcollected [hook]
          item: <Function test_string_number_validation>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/parser/test_04_validation.py' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/parser/test_05_integration.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/parser/test_05_integration.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/parser/test_05_integration.py>
      find_module called for: test_05_integration [assertion]
      matched test file '/Users/ashiya/git/tabscript/tests/parser/test_05_integration.py' [assertion]
      found cached rewritten pyc for /Users/ashiya/git/tabscript/tests/parser/test_05_integration.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __name__
            obj: test_05_integration
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x107696850>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __spec__
            obj: ModuleSpec(name='test_05_integration', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x107696850>, origin='/Users/ashiya/git/tabscript/tests/parser/test_05_integration.py')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __file__
            obj: /Users/ashiya/git/tabscript/tests/parser/test_05_integration.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __cached__
            obj: /Users/ashiya/git/tabscript/tests/parser/__pycache__/test_05_integration.cpython-37.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2020 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: pytest
            obj: <module 'pytest' from '/Users/ashiya/.pyenv/versions/3.7.7/lib/python3.7/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: Parser
            obj: <class 'tabscript.parser.Parser'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: ParseError
            obj: <class 'tabscript.exceptions.ParseError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: test_complete_score
            obj: <function test_complete_score at 0x107f74200>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f5c810>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_complete_score>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: test_error_cases
            obj: <function test_error_cases at 0x107f74290>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f5c810>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_error_cases>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: test_sample_tab
            obj: <function test_sample_tab at 0x107f74320>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f5c810>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_sample_tab>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: test_repeat_test
            obj: <function test_repeat_test at 0x107f743b0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x107f5c810>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_repeat_test>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __new__
            obj: <built-in method __new__ of type object at 0x106510080>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/parser/test_05_integration.py>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/parser/test_05_integration.py' lenresult=4 outcome='passed'> [hook]
    genitems <Function test_complete_score> [collection]
      pytest_itemcollected [hook]
          item: <Function test_complete_score>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_error_cases> [collection]
      pytest_itemcollected [hook]
          item: <Function test_error_cases>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_sample_tab> [collection]
      pytest_itemcollected [hook]
          item: <Function test_sample_tab>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_repeat_test> [collection]
      pytest_itemcollected [hook]
          item: <Function test_repeat_test>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/parser/test_05_integration.py' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          session: <Session tabscript exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          config: <_pytest.config.Config object at 0x10749eb90>
          items: [<Function test_empty_line_removal>, <Function test_comment_removal>, <Function test_multiline_comment_edge_cases>, <Function test_bracket_normalization>, <Function test_metadata_extraction>, <Function test_invalid_metadata>, <Function test_section_structure>, <Function test_bar_structure>, <Function test_volta_structure>, <Function test_empty_section>, <Function test_basic_note_parsing>, <Function test_chord_parsing>, <Function test_rest_parsing>, <Function test_duration_inheritance>, <Function test_dotted_duration>, <Function test_invalid_note_format>, <Function test_muted_note>, <Function test_chord_notation>, <Function test_inheritance>, <Function test_move_notation>, <Function test_tie_slur_notation>, <Function test_repeat_bar_parsing>, <Function test_volta_bracket_parsing>, <Function test_multi_bar_volta_bracket_parsing>, <Function test_bar_duration>, <Function test_time_signature_validation>, <Function test_repeat_validation>, <Function test_volta_validation>, <Function test_string_number_validation>, <Function test_complete_score>, <Function test_error_cases>, <Function test_sample_tab>, <Function test_repeat_test>]
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session tabscript exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x10749eb90>
            startdir: /Users/ashiya/git/tabscript
            items: [<Function test_empty_line_removal>, <Function test_comment_removal>, <Function test_multiline_comment_edge_cases>, <Function test_bracket_normalization>, <Function test_metadata_extraction>, <Function test_invalid_metadata>, <Function test_section_structure>, <Function test_bar_structure>, <Function test_volta_structure>, <Function test_empty_section>, <Function test_basic_note_parsing>, <Function test_chord_parsing>, <Function test_rest_parsing>, <Function test_duration_inheritance>, <Function test_dotted_duration>, <Function test_invalid_note_format>, <Function test_muted_note>, <Function test_chord_notation>, <Function test_inheritance>, <Function test_move_notation>, <Function test_tie_slur_notation>, <Function test_repeat_bar_parsing>, <Function test_volta_bracket_parsing>, <Function test_multi_bar_volta_bracket_parsing>, <Function test_bar_duration>, <Function test_time_signature_validation>, <Function test_repeat_validation>, <Function test_volta_validation>, <Function test_string_number_validation>, <Function test_complete_score>, <Function test_error_cases>, <Function test_sample_tab>, <Function test_repeat_test>]
        finish pytest_report_collectionfinish --> [] [hook]
      finish pytest_collection_finish --> [] [hook]
    finish pytest_collection --> [<Function test_empty_line_removal>, <Function test_comment_removal>, <Function test_multiline_comment_edge_cases>, <Function test_bracket_normalization>, <Function test_metadata_extraction>, <Function test_invalid_metadata>, <Function test_section_structure>, <Function test_bar_structure>, <Function test_volta_structure>, <Function test_empty_section>, <Function test_basic_note_parsing>, <Function test_chord_parsing>, <Function test_rest_parsing>, <Function test_duration_inheritance>, <Function test_dotted_duration>, <Function test_invalid_note_format>, <Function test_muted_note>, <Function test_chord_notation>, <Function test_inheritance>, <Function test_move_notation>, <Function test_tie_slur_notation>, <Function test_repeat_bar_parsing>, <Function test_volta_bracket_parsing>, <Function test_multi_bar_volta_bracket_parsing>, <Function test_bar_duration>, <Function test_time_signature_validation>, <Function test_repeat_validation>, <Function test_volta_validation>, <Function test_string_number_validation>, <Function test_complete_score>, <Function test_error_cases>, <Function test_sample_tab>, <Function test_repeat_test>] [hook]
    pytest_runtestloop [hook]
        session: <Session tabscript exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=33>
      pytest_runtest_protocol [hook]
          item: <Function test_empty_line_removal>
          nextitem: <Function test_comment_removal>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_01_preprocess.py::test_empty_line_removal
            location: ('tests/parser/test_01_preprocess.py', 4, 'test_empty_line_removal')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_empty_line_removal>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_empty_line_removal>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_01_preprocess.py::test_empty_line_removal' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_01_preprocess.py::test_empty_line_removal' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_01_preprocess.py::test_empty_line_removal' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_empty_line_removal>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_empty_line_removal>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_empty_line_removal>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_01_preprocess.py::test_empty_line_removal' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_01_preprocess.py::test_empty_line_removal' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_01_preprocess.py::test_empty_line_removal' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_empty_line_removal>
            nextitem: <Function test_comment_removal>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_empty_line_removal>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_01_preprocess.py::test_empty_line_removal' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_01_preprocess.py::test_empty_line_removal' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_01_preprocess.py::test_empty_line_removal' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_01_preprocess.py::test_empty_line_removal
            location: ('tests/parser/test_01_preprocess.py', 4, 'test_empty_line_removal')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_comment_removal>
          nextitem: <Function test_multiline_comment_edge_cases>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_01_preprocess.py::test_comment_removal
            location: ('tests/parser/test_01_preprocess.py', 23, 'test_comment_removal')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_comment_removal>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_comment_removal>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_01_preprocess.py::test_comment_removal' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_01_preprocess.py::test_comment_removal' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_01_preprocess.py::test_comment_removal' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_comment_removal>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_comment_removal>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_comment_removal>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_01_preprocess.py::test_comment_removal' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_01_preprocess.py::test_comment_removal' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_01_preprocess.py::test_comment_removal' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_comment_removal>
            nextitem: <Function test_multiline_comment_edge_cases>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_comment_removal>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_01_preprocess.py::test_comment_removal' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_01_preprocess.py::test_comment_removal' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_01_preprocess.py::test_comment_removal' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_01_preprocess.py::test_comment_removal
            location: ('tests/parser/test_01_preprocess.py', 23, 'test_comment_removal')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_multiline_comment_edge_cases>
          nextitem: <Function test_bracket_normalization>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_01_preprocess.py::test_multiline_comment_edge_cases
            location: ('tests/parser/test_01_preprocess.py', 42, 'test_multiline_comment_edge_cases')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_multiline_comment_edge_cases>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_multiline_comment_edge_cases>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_01_preprocess.py::test_multiline_comment_edge_cases' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_01_preprocess.py::test_multiline_comment_edge_cases' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_01_preprocess.py::test_multiline_comment_edge_cases' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_multiline_comment_edge_cases>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_multiline_comment_edge_cases>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_multiline_comment_edge_cases>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_01_preprocess.py::test_multiline_comment_edge_cases' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_01_preprocess.py::test_multiline_comment_edge_cases' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_01_preprocess.py::test_multiline_comment_edge_cases' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_multiline_comment_edge_cases>
            nextitem: <Function test_bracket_normalization>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_multiline_comment_edge_cases>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_01_preprocess.py::test_multiline_comment_edge_cases' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_01_preprocess.py::test_multiline_comment_edge_cases' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_01_preprocess.py::test_multiline_comment_edge_cases' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_01_preprocess.py::test_multiline_comment_edge_cases
            location: ('tests/parser/test_01_preprocess.py', 42, 'test_multiline_comment_edge_cases')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_bracket_normalization>
          nextitem: <Function test_metadata_extraction>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_01_preprocess.py::test_bracket_normalization
            location: ('tests/parser/test_01_preprocess.py', 62, 'test_bracket_normalization')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_bracket_normalization>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_bracket_normalization>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_01_preprocess.py::test_bracket_normalization' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_01_preprocess.py::test_bracket_normalization' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_01_preprocess.py::test_bracket_normalization' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_bracket_normalization>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_bracket_normalization>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_bracket_normalization>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_01_preprocess.py::test_bracket_normalization' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_01_preprocess.py::test_bracket_normalization' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_01_preprocess.py::test_bracket_normalization' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_bracket_normalization>
            nextitem: <Function test_metadata_extraction>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_bracket_normalization>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_01_preprocess.py::test_bracket_normalization' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_01_preprocess.py::test_bracket_normalization' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_01_preprocess.py::test_bracket_normalization' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_01_preprocess.py::test_bracket_normalization
            location: ('tests/parser/test_01_preprocess.py', 62, 'test_bracket_normalization')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_metadata_extraction>
          nextitem: <Function test_invalid_metadata>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_02_structure.py::test_metadata_extraction
            location: ('tests/parser/test_02_structure.py', 5, 'test_metadata_extraction')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_metadata_extraction>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_metadata_extraction>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_02_structure.py::test_metadata_extraction' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_02_structure.py::test_metadata_extraction' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_02_structure.py::test_metadata_extraction' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_metadata_extraction>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_metadata_extraction>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_metadata_extraction>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_02_structure.py::test_metadata_extraction' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_02_structure.py::test_metadata_extraction' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_02_structure.py::test_metadata_extraction' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_metadata_extraction>
            nextitem: <Function test_invalid_metadata>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_metadata_extraction>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_02_structure.py::test_metadata_extraction' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_02_structure.py::test_metadata_extraction' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_02_structure.py::test_metadata_extraction' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_02_structure.py::test_metadata_extraction
            location: ('tests/parser/test_02_structure.py', 5, 'test_metadata_extraction')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_invalid_metadata>
          nextitem: <Function test_section_structure>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_02_structure.py::test_invalid_metadata
            location: ('tests/parser/test_02_structure.py', 21, 'test_invalid_metadata')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_invalid_metadata>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_invalid_metadata>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_02_structure.py::test_invalid_metadata' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_02_structure.py::test_invalid_metadata' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_02_structure.py::test_invalid_metadata' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_invalid_metadata>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_invalid_metadata>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_invalid_metadata>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_02_structure.py::test_invalid_metadata' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_02_structure.py::test_invalid_metadata' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_02_structure.py::test_invalid_metadata' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_invalid_metadata>
            nextitem: <Function test_section_structure>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_invalid_metadata>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_02_structure.py::test_invalid_metadata' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_02_structure.py::test_invalid_metadata' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_02_structure.py::test_invalid_metadata' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_02_structure.py::test_invalid_metadata
            location: ('tests/parser/test_02_structure.py', 21, 'test_invalid_metadata')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_section_structure>
          nextitem: <Function test_bar_structure>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_02_structure.py::test_section_structure
            location: ('tests/parser/test_02_structure.py', 30, 'test_section_structure')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_section_structure>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_section_structure>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_02_structure.py::test_section_structure' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_02_structure.py::test_section_structure' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_02_structure.py::test_section_structure' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_section_structure>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_section_structure>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_section_structure>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_02_structure.py::test_section_structure' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_02_structure.py::test_section_structure' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_02_structure.py::test_section_structure' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_section_structure>
            nextitem: <Function test_bar_structure>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_section_structure>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_02_structure.py::test_section_structure' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_02_structure.py::test_section_structure' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_02_structure.py::test_section_structure' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_02_structure.py::test_section_structure
            location: ('tests/parser/test_02_structure.py', 30, 'test_section_structure')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_bar_structure>
          nextitem: <Function test_volta_structure>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_02_structure.py::test_bar_structure
            location: ('tests/parser/test_02_structure.py', 49, 'test_bar_structure')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_bar_structure>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_bar_structure>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_02_structure.py::test_bar_structure' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_02_structure.py::test_bar_structure' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_02_structure.py::test_bar_structure' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_bar_structure>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_bar_structure>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_bar_structure>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_02_structure.py::test_bar_structure' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_02_structure.py::test_bar_structure' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_02_structure.py::test_bar_structure' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_bar_structure>
            nextitem: <Function test_volta_structure>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_bar_structure>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_02_structure.py::test_bar_structure' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_02_structure.py::test_bar_structure' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_02_structure.py::test_bar_structure' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_02_structure.py::test_bar_structure
            location: ('tests/parser/test_02_structure.py', 49, 'test_bar_structure')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_volta_structure>
          nextitem: <Function test_empty_section>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_02_structure.py::test_volta_structure
            location: ('tests/parser/test_02_structure.py', 67, 'test_volta_structure')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_volta_structure>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_volta_structure>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_02_structure.py::test_volta_structure' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_02_structure.py::test_volta_structure' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_02_structure.py::test_volta_structure' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_volta_structure>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_volta_structure>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_volta_structure>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_02_structure.py::test_volta_structure' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_02_structure.py::test_volta_structure' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_02_structure.py::test_volta_structure' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_volta_structure>
            nextitem: <Function test_empty_section>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_volta_structure>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_02_structure.py::test_volta_structure' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_02_structure.py::test_volta_structure' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_02_structure.py::test_volta_structure' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_02_structure.py::test_volta_structure
            location: ('tests/parser/test_02_structure.py', 67, 'test_volta_structure')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_empty_section>
          nextitem: <Function test_basic_note_parsing>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_02_structure.py::test_empty_section
            location: ('tests/parser/test_02_structure.py', 81, 'test_empty_section')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_empty_section>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_empty_section>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_02_structure.py::test_empty_section' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_02_structure.py::test_empty_section' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_02_structure.py::test_empty_section' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_empty_section>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_empty_section>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_empty_section>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_02_structure.py::test_empty_section' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_02_structure.py::test_empty_section' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_02_structure.py::test_empty_section' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_empty_section>
            nextitem: <Function test_basic_note_parsing>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_empty_section>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_02_structure.py::test_empty_section' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_02_structure.py::test_empty_section' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_02_structure.py::test_empty_section' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_02_structure.py::test_empty_section
            location: ('tests/parser/test_02_structure.py', 81, 'test_empty_section')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_basic_note_parsing>
          nextitem: <Function test_chord_parsing>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_03_bar_content.py::test_basic_note_parsing
            location: ('tests/parser/test_03_bar_content.py', 5, 'test_basic_note_parsing')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_basic_note_parsing>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_basic_note_parsing>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_basic_note_parsing' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_basic_note_parsing' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_basic_note_parsing' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_basic_note_parsing>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_basic_note_parsing>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_basic_note_parsing>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_basic_note_parsing' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_basic_note_parsing' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_basic_note_parsing' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_basic_note_parsing>
            nextitem: <Function test_chord_parsing>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_basic_note_parsing>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_basic_note_parsing' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_basic_note_parsing' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_basic_note_parsing' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_03_bar_content.py::test_basic_note_parsing
            location: ('tests/parser/test_03_bar_content.py', 5, 'test_basic_note_parsing')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_chord_parsing>
          nextitem: <Function test_rest_parsing>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_03_bar_content.py::test_chord_parsing
            location: ('tests/parser/test_03_bar_content.py', 25, 'test_chord_parsing')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_chord_parsing>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_chord_parsing>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_chord_parsing' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_chord_parsing' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_chord_parsing' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_chord_parsing>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_chord_parsing>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_chord_parsing>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_chord_parsing' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_chord_parsing' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_chord_parsing' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_chord_parsing>
            nextitem: <Function test_rest_parsing>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_chord_parsing>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_chord_parsing' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_chord_parsing' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_chord_parsing' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_03_bar_content.py::test_chord_parsing
            location: ('tests/parser/test_03_bar_content.py', 25, 'test_chord_parsing')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_rest_parsing>
          nextitem: <Function test_duration_inheritance>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_03_bar_content.py::test_rest_parsing
            location: ('tests/parser/test_03_bar_content.py', 95, 'test_rest_parsing')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_rest_parsing>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_rest_parsing>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_rest_parsing' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_rest_parsing' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_rest_parsing' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_rest_parsing>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_rest_parsing>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_rest_parsing>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_rest_parsing' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_rest_parsing' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_rest_parsing' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_rest_parsing>
            nextitem: <Function test_duration_inheritance>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_rest_parsing>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_rest_parsing' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_rest_parsing' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_rest_parsing' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_03_bar_content.py::test_rest_parsing
            location: ('tests/parser/test_03_bar_content.py', 95, 'test_rest_parsing')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_duration_inheritance>
          nextitem: <Function test_dotted_duration>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_03_bar_content.py::test_duration_inheritance
            location: ('tests/parser/test_03_bar_content.py', 106, 'test_duration_inheritance')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_duration_inheritance>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_duration_inheritance>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_duration_inheritance' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_duration_inheritance' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_duration_inheritance' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_duration_inheritance>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_duration_inheritance>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_duration_inheritance>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_duration_inheritance' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_duration_inheritance' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_duration_inheritance' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_duration_inheritance>
            nextitem: <Function test_dotted_duration>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_duration_inheritance>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_duration_inheritance' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_duration_inheritance' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_duration_inheritance' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_03_bar_content.py::test_duration_inheritance
            location: ('tests/parser/test_03_bar_content.py', 106, 'test_duration_inheritance')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_dotted_duration>
          nextitem: <Function test_invalid_note_format>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_03_bar_content.py::test_dotted_duration
            location: ('tests/parser/test_03_bar_content.py', 116, 'test_dotted_duration')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_dotted_duration>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_dotted_duration>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_dotted_duration' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_dotted_duration' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_dotted_duration' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_dotted_duration>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_dotted_duration>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_dotted_duration>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_dotted_duration' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_dotted_duration' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_dotted_duration' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_dotted_duration>
            nextitem: <Function test_invalid_note_format>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_dotted_duration>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_dotted_duration' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_dotted_duration' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_dotted_duration' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_03_bar_content.py::test_dotted_duration
            location: ('tests/parser/test_03_bar_content.py', 116, 'test_dotted_duration')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_invalid_note_format>
          nextitem: <Function test_muted_note>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_03_bar_content.py::test_invalid_note_format
            location: ('tests/parser/test_03_bar_content.py', 127, 'test_invalid_note_format')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_invalid_note_format>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_invalid_note_format>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_invalid_note_format' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_invalid_note_format' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_invalid_note_format' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_invalid_note_format>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_invalid_note_format>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_invalid_note_format>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_invalid_note_format' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_invalid_note_format' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_invalid_note_format' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_invalid_note_format>
            nextitem: <Function test_muted_note>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_invalid_note_format>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_invalid_note_format' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_invalid_note_format' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_invalid_note_format' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_03_bar_content.py::test_invalid_note_format
            location: ('tests/parser/test_03_bar_content.py', 127, 'test_invalid_note_format')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_muted_note>
          nextitem: <Function test_chord_notation>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_03_bar_content.py::test_muted_note
            location: ('tests/parser/test_03_bar_content.py', 140, 'test_muted_note')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_muted_note>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_muted_note>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_muted_note' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_muted_note' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_muted_note' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_muted_note>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_muted_note>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_muted_note>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_muted_note' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_muted_note' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_muted_note' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_muted_note>
            nextitem: <Function test_chord_notation>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_muted_note>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_muted_note' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_muted_note' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_muted_note' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_03_bar_content.py::test_muted_note
            location: ('tests/parser/test_03_bar_content.py', 140, 'test_muted_note')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_chord_notation>
          nextitem: <Function test_inheritance>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_03_bar_content.py::test_chord_notation
            location: ('tests/parser/test_03_bar_content.py', 152, 'test_chord_notation')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_chord_notation>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_chord_notation>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_chord_notation' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_chord_notation' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_chord_notation' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_chord_notation>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_chord_notation>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_chord_notation>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_chord_notation' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_chord_notation' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_chord_notation' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_chord_notation>
            nextitem: <Function test_inheritance>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_chord_notation>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_chord_notation' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_chord_notation' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_chord_notation' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_03_bar_content.py::test_chord_notation
            location: ('tests/parser/test_03_bar_content.py', 152, 'test_chord_notation')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_inheritance>
          nextitem: <Function test_move_notation>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_03_bar_content.py::test_inheritance
            location: ('tests/parser/test_03_bar_content.py', 198, 'test_inheritance')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_inheritance>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_inheritance>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_inheritance' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_inheritance' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_inheritance' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_inheritance>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_inheritance>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_inheritance>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_inheritance' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_inheritance' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_inheritance' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_inheritance>
            nextitem: <Function test_move_notation>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_inheritance>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_inheritance' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_inheritance' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_inheritance' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_03_bar_content.py::test_inheritance
            location: ('tests/parser/test_03_bar_content.py', 198, 'test_inheritance')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_move_notation>
          nextitem: <Function test_tie_slur_notation>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_03_bar_content.py::test_move_notation
            location: ('tests/parser/test_03_bar_content.py', 236, 'test_move_notation')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_move_notation>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_move_notation>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_move_notation' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_move_notation' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_move_notation' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_move_notation>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_move_notation>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_move_notation>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_move_notation' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_move_notation' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_move_notation' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_move_notation>
            nextitem: <Function test_tie_slur_notation>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_move_notation>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_move_notation' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_move_notation' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_move_notation' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_03_bar_content.py::test_move_notation
            location: ('tests/parser/test_03_bar_content.py', 236, 'test_move_notation')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_tie_slur_notation>
          nextitem: <Function test_repeat_bar_parsing>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_03_bar_content.py::test_tie_slur_notation
            location: ('tests/parser/test_03_bar_content.py', 271, 'test_tie_slur_notation')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_tie_slur_notation>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_tie_slur_notation>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_tie_slur_notation' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_tie_slur_notation' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_tie_slur_notation' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_tie_slur_notation>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_tie_slur_notation>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_tie_slur_notation>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_tie_slur_notation' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_tie_slur_notation' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_tie_slur_notation' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_tie_slur_notation>
            nextitem: <Function test_repeat_bar_parsing>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_tie_slur_notation>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_tie_slur_notation' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_tie_slur_notation' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_tie_slur_notation' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_03_bar_content.py::test_tie_slur_notation
            location: ('tests/parser/test_03_bar_content.py', 271, 'test_tie_slur_notation')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_repeat_bar_parsing>
          nextitem: <Function test_volta_bracket_parsing>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_03_bar_content.py::test_repeat_bar_parsing
            location: ('tests/parser/test_03_bar_content.py', 300, 'test_repeat_bar_parsing')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_repeat_bar_parsing>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_repeat_bar_parsing>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_repeat_bar_parsing' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_repeat_bar_parsing' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_repeat_bar_parsing' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_repeat_bar_parsing>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_repeat_bar_parsing>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_repeat_bar_parsing>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_repeat_bar_parsing' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_repeat_bar_parsing' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_repeat_bar_parsing' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_repeat_bar_parsing>
            nextitem: <Function test_volta_bracket_parsing>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_repeat_bar_parsing>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_repeat_bar_parsing' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_repeat_bar_parsing' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_repeat_bar_parsing' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_03_bar_content.py::test_repeat_bar_parsing
            location: ('tests/parser/test_03_bar_content.py', 300, 'test_repeat_bar_parsing')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_volta_bracket_parsing>
          nextitem: <Function test_multi_bar_volta_bracket_parsing>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_03_bar_content.py::test_volta_bracket_parsing
            location: ('tests/parser/test_03_bar_content.py', 315, 'test_volta_bracket_parsing')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_volta_bracket_parsing>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_volta_bracket_parsing>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_volta_bracket_parsing' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_volta_bracket_parsing' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_volta_bracket_parsing' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_volta_bracket_parsing>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_volta_bracket_parsing>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_volta_bracket_parsing>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_volta_bracket_parsing' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_volta_bracket_parsing' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_volta_bracket_parsing' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_volta_bracket_parsing>
            nextitem: <Function test_multi_bar_volta_bracket_parsing>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_volta_bracket_parsing>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_volta_bracket_parsing' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_volta_bracket_parsing' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_volta_bracket_parsing' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_03_bar_content.py::test_volta_bracket_parsing
            location: ('tests/parser/test_03_bar_content.py', 315, 'test_volta_bracket_parsing')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_multi_bar_volta_bracket_parsing>
          nextitem: <Function test_bar_duration>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_03_bar_content.py::test_multi_bar_volta_bracket_parsing
            location: ('tests/parser/test_03_bar_content.py', 340, 'test_multi_bar_volta_bracket_parsing')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_multi_bar_volta_bracket_parsing>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_multi_bar_volta_bracket_parsing>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_multi_bar_volta_bracket_parsing' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_multi_bar_volta_bracket_parsing' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_multi_bar_volta_bracket_parsing' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_multi_bar_volta_bracket_parsing>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_multi_bar_volta_bracket_parsing>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_multi_bar_volta_bracket_parsing>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_multi_bar_volta_bracket_parsing' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_multi_bar_volta_bracket_parsing' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_multi_bar_volta_bracket_parsing' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_multi_bar_volta_bracket_parsing>
            nextitem: <Function test_bar_duration>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_multi_bar_volta_bracket_parsing>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_03_bar_content.py::test_multi_bar_volta_bracket_parsing' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_03_bar_content.py::test_multi_bar_volta_bracket_parsing' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_03_bar_content.py::test_multi_bar_volta_bracket_parsing' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_03_bar_content.py::test_multi_bar_volta_bracket_parsing
            location: ('tests/parser/test_03_bar_content.py', 340, 'test_multi_bar_volta_bracket_parsing')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_bar_duration>
          nextitem: <Function test_time_signature_validation>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_04_validation.py::test_bar_duration
            location: ('tests/parser/test_04_validation.py', 4, 'test_bar_duration')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_bar_duration>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_bar_duration>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_04_validation.py::test_bar_duration' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_04_validation.py::test_bar_duration' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_04_validation.py::test_bar_duration' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_bar_duration>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_bar_duration>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_bar_duration>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_04_validation.py::test_bar_duration' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_04_validation.py::test_bar_duration' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_04_validation.py::test_bar_duration' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_bar_duration>
            nextitem: <Function test_time_signature_validation>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_bar_duration>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_04_validation.py::test_bar_duration' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_04_validation.py::test_bar_duration' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_04_validation.py::test_bar_duration' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_04_validation.py::test_bar_duration
            location: ('tests/parser/test_04_validation.py', 4, 'test_bar_duration')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_time_signature_validation>
          nextitem: <Function test_repeat_validation>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_04_validation.py::test_time_signature_validation
            location: ('tests/parser/test_04_validation.py', 24, 'test_time_signature_validation')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_time_signature_validation>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_time_signature_validation>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_04_validation.py::test_time_signature_validation' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_04_validation.py::test_time_signature_validation' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_04_validation.py::test_time_signature_validation' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_time_signature_validation>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_time_signature_validation>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_time_signature_validation>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_04_validation.py::test_time_signature_validation' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_04_validation.py::test_time_signature_validation' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_04_validation.py::test_time_signature_validation' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_time_signature_validation>
            nextitem: <Function test_repeat_validation>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_time_signature_validation>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_04_validation.py::test_time_signature_validation' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_04_validation.py::test_time_signature_validation' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_04_validation.py::test_time_signature_validation' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_04_validation.py::test_time_signature_validation
            location: ('tests/parser/test_04_validation.py', 24, 'test_time_signature_validation')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_repeat_validation>
          nextitem: <Function test_volta_validation>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_04_validation.py::test_repeat_validation
            location: ('tests/parser/test_04_validation.py', 48, 'test_repeat_validation')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_repeat_validation>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_repeat_validation>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_04_validation.py::test_repeat_validation' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_04_validation.py::test_repeat_validation' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_04_validation.py::test_repeat_validation' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_repeat_validation>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_repeat_validation>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_repeat_validation>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_04_validation.py::test_repeat_validation' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_04_validation.py::test_repeat_validation' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_04_validation.py::test_repeat_validation' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_repeat_validation>
            nextitem: <Function test_volta_validation>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_repeat_validation>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_04_validation.py::test_repeat_validation' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_04_validation.py::test_repeat_validation' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_04_validation.py::test_repeat_validation' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_04_validation.py::test_repeat_validation
            location: ('tests/parser/test_04_validation.py', 48, 'test_repeat_validation')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_volta_validation>
          nextitem: <Function test_string_number_validation>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_04_validation.py::test_volta_validation
            location: ('tests/parser/test_04_validation.py', 68, 'test_volta_validation')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_volta_validation>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_volta_validation>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_04_validation.py::test_volta_validation' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_04_validation.py::test_volta_validation' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_04_validation.py::test_volta_validation' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_volta_validation>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_volta_validation>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_volta_validation>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_04_validation.py::test_volta_validation' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_04_validation.py::test_volta_validation' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_04_validation.py::test_volta_validation' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_volta_validation>
            nextitem: <Function test_string_number_validation>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_volta_validation>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_04_validation.py::test_volta_validation' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_04_validation.py::test_volta_validation' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_04_validation.py::test_volta_validation' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_04_validation.py::test_volta_validation
            location: ('tests/parser/test_04_validation.py', 68, 'test_volta_validation')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_string_number_validation>
          nextitem: <Function test_complete_score>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_04_validation.py::test_string_number_validation
            location: ('tests/parser/test_04_validation.py', 92, 'test_string_number_validation')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_string_number_validation>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_string_number_validation>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_04_validation.py::test_string_number_validation' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_04_validation.py::test_string_number_validation' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_04_validation.py::test_string_number_validation' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_string_number_validation>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_string_number_validation>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_string_number_validation>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_04_validation.py::test_string_number_validation' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_04_validation.py::test_string_number_validation' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_04_validation.py::test_string_number_validation' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_string_number_validation>
            nextitem: <Function test_complete_score>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_string_number_validation>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_04_validation.py::test_string_number_validation' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_04_validation.py::test_string_number_validation' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_04_validation.py::test_string_number_validation' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_04_validation.py::test_string_number_validation
            location: ('tests/parser/test_04_validation.py', 92, 'test_string_number_validation')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_complete_score>
          nextitem: <Function test_error_cases>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_05_integration.py::test_complete_score
            location: ('tests/parser/test_05_integration.py', 4, 'test_complete_score')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_complete_score>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_complete_score>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_05_integration.py::test_complete_score' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_05_integration.py::test_complete_score' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_05_integration.py::test_complete_score' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_complete_score>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_complete_score>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_complete_score>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_05_integration.py::test_complete_score' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_05_integration.py::test_complete_score' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_05_integration.py::test_complete_score' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_complete_score>
            nextitem: <Function test_error_cases>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_complete_score>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_05_integration.py::test_complete_score' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_05_integration.py::test_complete_score' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_05_integration.py::test_complete_score' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_05_integration.py::test_complete_score
            location: ('tests/parser/test_05_integration.py', 4, 'test_complete_score')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_error_cases>
          nextitem: <Function test_sample_tab>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_05_integration.py::test_error_cases
            location: ('tests/parser/test_05_integration.py', 63, 'test_error_cases')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_error_cases>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_error_cases>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_05_integration.py::test_error_cases' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_05_integration.py::test_error_cases' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_05_integration.py::test_error_cases' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_error_cases>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_error_cases>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_error_cases>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_05_integration.py::test_error_cases' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_05_integration.py::test_error_cases' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_05_integration.py::test_error_cases' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_error_cases>
            nextitem: <Function test_sample_tab>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_error_cases>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_05_integration.py::test_error_cases' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_05_integration.py::test_error_cases' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_05_integration.py::test_error_cases' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_05_integration.py::test_error_cases
            location: ('tests/parser/test_05_integration.py', 63, 'test_error_cases')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_sample_tab>
          nextitem: <Function test_repeat_test>
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_05_integration.py::test_sample_tab
            location: ('tests/parser/test_05_integration.py', 93, 'test_sample_tab')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_sample_tab>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sample_tab>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_05_integration.py::test_sample_tab' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_05_integration.py::test_sample_tab' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_05_integration.py::test_sample_tab' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_sample_tab>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_sample_tab>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sample_tab>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_05_integration.py::test_sample_tab' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_05_integration.py::test_sample_tab' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_05_integration.py::test_sample_tab' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_sample_tab>
            nextitem: <Function test_repeat_test>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sample_tab>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_05_integration.py::test_sample_tab' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_05_integration.py::test_sample_tab' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_05_integration.py::test_sample_tab' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_05_integration.py::test_sample_tab
            location: ('tests/parser/test_05_integration.py', 93, 'test_sample_tab')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_repeat_test>
          nextitem: None
        pytest_runtest_logstart [hook]
            nodeid: tests/parser/test_05_integration.py::test_repeat_test
            location: ('tests/parser/test_05_integration.py', 116, 'test_repeat_test')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_repeat_test>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_repeat_test>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_05_integration.py::test_repeat_test' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_05_integration.py::test_repeat_test' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_05_integration.py::test_repeat_test' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_repeat_test>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_repeat_test>
        pytest_runtest_makereport [hook]
            item: <Function test_repeat_test>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ParseError('Line 0: Invalid fret number: {1') tblen=31>>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_05_integration.py::test_repeat_test' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_05_integration.py::test_repeat_test' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_05_integration.py::test_repeat_test' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_repeat_test>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ParseError('Line 0: Invalid fret number: {1') tblen=5>>
            report: <TestReport 'tests/parser/test_05_integration.py::test_repeat_test' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_repeat_test>
            nextitem: None
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_repeat_test>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/parser/test_05_integration.py::test_repeat_test' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/parser/test_05_integration.py::test_repeat_test' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/parser/test_05_integration.py::test_repeat_test' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x10749eb90>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/parser/test_05_integration.py::test_repeat_test
            location: ('tests/parser/test_05_integration.py', 116, 'test_repeat_test')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
    finish pytest_runtestloop --> True [hook]
    pytest_sessionfinish [hook]
        session: <Session tabscript exitstatus=<ExitCode.TESTS_FAILED: 1> testsfailed=1 testscollected=33>
        exitstatus: ExitCode.TESTS_FAILED
      pytest_terminal_summary [hook]
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x107711d50>
          exitstatus: ExitCode.TESTS_FAILED
          config: <_pytest.config.Config object at 0x10749eb90>
      early skip of rewriting module: pygments [assertion]
      early skip of rewriting module: pygments.formatters [assertion]
      early skip of rewriting module: pygments.formatters._mapping [assertion]
      early skip of rewriting module: pygments.plugin [assertion]
      early skip of rewriting module: pygments.util [assertion]
      early skip of rewriting module: pygments.formatters.terminal [assertion]
      early skip of rewriting module: pygments.formatter [assertion]
      early skip of rewriting module: pygments.styles [assertion]
      early skip of rewriting module: pygments.styles._mapping [assertion]
      early skip of rewriting module: pygments.token [assertion]
      early skip of rewriting module: pygments.console [assertion]
      early skip of rewriting module: pygments.lexers [assertion]
      early skip of rewriting module: pygments.lexers._mapping [assertion]
      early skip of rewriting module: pygments.modeline [assertion]
      early skip of rewriting module: pygments.lexers.python [assertion]
      early skip of rewriting module: pygments.lexer [assertion]
      early skip of rewriting module: pygments.filter [assertion]
      early skip of rewriting module: pygments.filters [assertion]
      early skip of rewriting module: pygments.regexopt [assertion]
      early skip of rewriting module: pygments.unistring [assertion]
      early skip of rewriting module: pygments.styles.default [assertion]
      early skip of rewriting module: pygments.style [assertion]
      early skip of rewriting module: wcwidth [assertion]
      early skip of rewriting module: wcwidth.wcwidth [assertion]
      early skip of rewriting module: wcwidth.table_wide [assertion]
      early skip of rewriting module: wcwidth.table_zero [assertion]
      early skip of rewriting module: wcwidth.unicode_versions [assertion]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/parser/test_05_integration.py::test_repeat_test' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x10749eb90>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x10749eb90>
    finish pytest_unconfigure --> [] [hook]
